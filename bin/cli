#!/usr/bin/env node

const app = require('commander')
const commands = require('../lib/commands')

app
  .version(require('../package.json').version)

const registerCommand = (name, description) => {
  return app
    .command(name)
    .description(description)
    .option('-p, --passphrase <value>', 'Generate the transaction with a second passphrase.', 'passphrase')
    .option('-s, --second-passphrase <value>', 'Generate the transaction with a second passphrase.')
    .option('-n, --network <value>', 'The network to use for cryptography [mainnet|devnet]', 'devnet')
    .option('-f, --file <value>', 'write the json encoded transaction to the given file')
    .option('-c, --copy', 'copy the transactions to the clipboard')
    .option('-l, --log', 'log the json encoded transaction')
}

registerCommand('transfer', 'Generate a transfer transaction.')
  .option('-r, --recipient <value>', 'recipient address')
  .option('-a, --amount <value>', 'transaction amount', 200000000)
  .option('-v, --vendorField <value>', 'transaction vendor field')
  .action(cmd => commands.createTransfer(cmd))

registerCommand('second-signature-registration', 'Generate a second signature registration transaction.')
  .action(cmd => commands.createSecondSignatureRegistration(cmd))

registerCommand('delegate-registration', 'Generate a delegate registration transaction.')
  .option('-u, --username <value>', 'delegate username', 'boldninja')
  .action(cmd => commands.createDelegateRegistration(cmd))

registerCommand('vote', 'Generate a vote transaction.')
  .option('-d, --delegate <value>', 'delegate public key', '022cca9529ec97a772156c152a00aad155ee6708243e65c9d211a589cb5d43234d')
  .action(cmd => commands.createVote(cmd))

registerCommand('unvote', 'Generate a unvote transaction.')
  .option('-d, --delegate <value>', 'delegate public key', '022cca9529ec97a772156c152a00aad155ee6708243e65c9d211a589cb5d43234d')
  .action(cmd => commands.createUnvote(cmd))

registerCommand('identity', 'Generate an identity.')
  .action(cmd => commands.createIdentity(cmd))

if (!process.argv.slice(2).length) {
  app.outputHelp()

  process.exit()
}

app.parse(process.argv)
